<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fluid</name>
    </assembly>
    <members>
        <member name="T:Fluid.Ast.CallbackStatement">
            <summary>
            An instance of this class is used to execute some custom code in a template.
            </summary>
        </member>
        <member name="M:Fluid.DefaultFluidParser.ConsumeTag(Microsoft.Extensions.Primitives.StringSegment,System.Int32,System.String,System.Int32@)">
            <summary>
            Creates a <see cref="T:Fluid.Ast.TextStatement"/> by reading the text until the specific end tag is found,
            or the end of the segment reached.
            </summary>
        </member>
        <member name="M:Fluid.DefaultFluidParser.CreateTextStatement(Microsoft.Extensions.Primitives.StringSegment,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a <see cref="T:Fluid.Ast.TextStatement"/> where the extra whitespace is stripped 
            for a Tag that is the only content on a line
            </summary>
            <param name="segment"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="trimStart"></param>
            <param name="trimEnd"></param>
            <param name="stripEmptyLines"></param>
            <returns><see cref="T:Fluid.Ast.TextStatement"/></returns>
        </member>
        <member name="M:Fluid.DefaultFluidParser.BuildRangePart(Irony.Parsing.ParseTreeNode)">
            <summary>
            Parses either a Number or a MemberAccess
            </summary>
        </member>
        <member name="T:Fluid.FilterArguments">
            <summary>
            Represents the list of arguments that are passed to a <see cref="T:Fluid.FilterDelegate"/>
            when invoked.
            </summary>
        </member>
        <member name="M:Fluid.Filters.MiscFilters.Handleize(Fluid.Values.FluidValue,Fluid.FilterArguments,Fluid.TemplateContext)">
            <summary>
            Converts from pascal/camel case to lower kebab-case.
            </summary>
        </member>
        <member name="P:Fluid.IMemberAccessStrategy.IgnoreCasing">
            <summary>
            Gets or sets whether the member casing is ignored or not.
            </summary>
            <remarks>This property should be set before calling <see cref="M:Fluid.IMemberAccessStrategy.Register(System.Type,System.String,Fluid.IMemberAccessor)"/>.</remarks>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``1(Fluid.IMemberAccessStrategy)">
            <summary>
            Registers a type and all its public properties.
            </summary>
            <typeparam name="T">The type to register.</typeparam>
            <param name="strategy">The <see cref="T:Fluid.IMemberAccessStrategy"/>.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register(Fluid.IMemberAccessStrategy,System.Type)">
            <summary>
            Registers a type and all its public properties.
            </summary>
            <param name="strategy">The <see cref="T:Fluid.IMemberAccessStrategy"/>.</param>
            <param name="type">The type to register.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``1(Fluid.IMemberAccessStrategy,System.String[])">
            <summary>
            Registers a limited set of properties in a type.
            </summary>
            <typeparam name="T">The type to register.</typeparam>
            <param name="strategy">The <see cref="T:Fluid.IMemberAccessStrategy"/>.</param>
            <param name="names">The names of the properties in the type to register.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``1(Fluid.IMemberAccessStrategy,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Registers a limited set of properties in a type.
            </summary>
            <typeparam name="T">The type to register.</typeparam>
            <param name="strategy">The <see cref="T:Fluid.IMemberAccessStrategy"/>.</param>
            <param name="names">The property's expressions in the type to register.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register(Fluid.IMemberAccessStrategy,System.Type,System.String[])">
            <summary>
            Registers a limited set of properties in a type.
            </summary>
            <param name="strategy">The <see cref="T:Fluid.IMemberAccessStrategy"/>.</param>
            <param name="type">The type to register.</param>
            <param name="names">The names of the properties in the type to register.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``1(Fluid.IMemberAccessStrategy,System.String,Fluid.IMemberAccessor)">
            <summary>
            Registers a named property when accessing a type using a <see cref="T:Fluid.IMemberAccessor"/>
            to retrieve the value. The name of the property doesn't have to exist on the object.
            </summary>
            <typeparam name="T">The type to register.</typeparam>
            <param name="strategy">The <see cref="T:Fluid.IMemberAccessStrategy"/>.</param>
            <param name="name">The name of the property to intercept.</param>
            <param name="getter">The <see cref="T:Fluid.IMemberAccessor"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``1(Fluid.IMemberAccessStrategy,Fluid.IMemberAccessor)">
            <summary>
            Registers a type using a <see cref="T:Fluid.IMemberAccessor"/> to retrieve any of
            its property values.
            </summary>
            <typeparam name="T">The type to register.</typeparam>
            <param name="strategy">The <see cref="T:Fluid.IMemberAccessStrategy"/>.</param>
            <param name="getter">The <see cref="T:Fluid.IMemberAccessor"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register(Fluid.IMemberAccessStrategy,System.Type,Fluid.IMemberAccessor)">
            <summary>
            Registers a type using a <see cref="T:Fluid.IMemberAccessor"/> to retrieve any of
            its property values.
            </summary>
            <param name="strategy">The <see cref="T:Fluid.IMemberAccessStrategy"/>.</param>
            <param name="type">The type to register.</param>
            <param name="getter">The <see cref="T:Fluid.IMemberAccessor"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``2(Fluid.IMemberAccessStrategy,System.Func{``0,System.String,``1})">
            <summary>
            Registers a type with a <see cref="T:Func{T, string, TResult}"/> to retrieve any of
            its property values.
            </summary>
            <typeparam name="T">The type to register.</typeparam>
            <typeparam name="TResult">The type to return.</typeparam>
            <param name="strategy">The <see cref="T:Fluid.IMemberAccessStrategy"/> to register.</param>
            <param name="accessor">The <see cref="T:Func{T, string, TResult}"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``2(Fluid.IMemberAccessStrategy,System.Func{``0,System.String,Fluid.TemplateContext,``1})">
            <summary>
            Registers a type with a <see cref="T:Func{T, string, TemplateContext, TResult}"/> to retrieve any of
            its property values.
            </summary>
            <typeparam name="T">The type to register.</typeparam>
            <typeparam name="TResult">The type to return.</typeparam>
            <param name="strategy">The <see cref="T:Fluid.IMemberAccessStrategy"/>.</param>
            <param name="accessor">The <see cref="T:Func{T, string, TemplateContext, TResult}"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``2(Fluid.IMemberAccessStrategy,System.Func{``0,System.String,System.Threading.Tasks.Task{``1}})">
            <summary>
            Registers a type with a <see cref="T:Func{T, string, Task{TResult}}"/> to retrieve any of
            its property values.
            </summary>
            <param name="strategy">The <see cref="T:Fluid.IMemberAccessStrategy"/>.</param>
            <param name="accessor">The <see cref="T:Func{T, string, Task{Object}}"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``2(Fluid.IMemberAccessStrategy,System.Func{``0,System.String,Fluid.TemplateContext,System.Threading.Tasks.Task{``1}})">
            <summary>
            Registers a type with a <see cref="T:Func{T, string, TemplateContext, Task{TResult}}"/> to retrieve any of
            its property values.
            </summary>
            <param name="strategy">The <see cref="T:Fluid.IMemberAccessStrategy"/>.</param>
            <param name="accessor">The <see cref="T:Func{T, string, TemplateContext, Task{TResult}}"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``2(Fluid.IMemberAccessStrategy,System.String,System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Registers a type with a <see cref="T:Func{T, Task{TResult}}"/> to retrieve the given property's value.
            </summary>
            <param name="strategy">The <see cref="T:Fluid.IMemberAccessStrategy"/>.</param>
            <param name="name">The name of the property.</param>
            <param name="accessor">The <see cref="T:Func{T, Task{TResult}}"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``2(Fluid.IMemberAccessStrategy,System.String,System.Func{``0,Fluid.TemplateContext,System.Threading.Tasks.Task{``1}})">
            <summary>
            Registers a type with a <see cref="T:Func{T, TemplateContext, Task{Object}}"/> to retrieve the given property's value.
            </summary>
            <param name="strategy">The <see cref="T:Fluid.IMemberAccessStrategy"/>.</param>
            <param name="name">The name of the property.</param>
            <param name="accessor">The <see cref="T:Func{T, TemplateContext, Task{Object}}"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``2(Fluid.IMemberAccessStrategy,System.String,System.Func{``0,``1})">
            <summary>
            Registers a type with a <see cref="T:System.Func`2"/> to retrieve the property specified.
            </summary>
            <param name="strategy">The <see cref="T:Fluid.IMemberAccessStrategy"/>.</param>
            <param name="name">The name of the property.</param>
            <param name="accessor">The <see cref="T:System.Func`2"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``2(Fluid.IMemberAccessStrategy,System.String,System.Func{``0,Fluid.TemplateContext,``1})">
            <summary>
            Registers a type with a <see cref="T:System.Func`3"/> to retrieve the property specified.
            </summary>
            <param name="strategy">The <see cref="T:Fluid.IMemberAccessStrategy"/>.</param>
            <param name="name">The name of the property.</param>
            <param name="accessor">The <see cref="T:System.Func`3"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.ParserContext.EnterBlock(Irony.Parsing.ParseTreeNode)">
            <summary>
            Invoked when a block is entered to create a new statements context
            which will received all subsequent statements.
            </summary>
        </member>
        <member name="M:Fluid.ParserContext.EnterBlockSection(System.String,Fluid.Ast.TagStatement)">
            <summary>
            Invoked when a section is entered to create a new statements context
            which will received all subsequent statements.
            </summary>
        </member>
        <member name="M:Fluid.ParserContext.ExitBlock">
            <summary>
            Invoked when the end of a block has been reached.
            It resets the current statements context to the outer block.
            </summary>
        </member>
        <member name="T:Fluid.ObjectPool`1">
             <summary>
             Generic implementation of object pooling pattern with predefined pool size limit. The main
             purpose is that limited number of frequently used objects can be kept in the pool for
             further recycling.
            
             Notes:
             1) it is not the goal to keep all returned objects. Pool is not meant for storage. If there
                is no space in the pool, extra returned objects will be dropped.
            
             2) it is implied that if object was obtained from a pool, the caller will return it back in
                a relatively short time. Keeping checked out objects for long durations is ok, but
                reduces usefulness of pooling. Just new up your own.
            
             Not returning objects to the pool in not detrimental to the pool's work, but is a bad practice.
             Rationale:
                If there is no intent for reusing the object, do not use pool - just use "new".
             </summary>
        </member>
        <member name="T:Fluid.ObjectPool`1.Factory">
            <remarks>
            Not using System.Func{T} because this file is linked into the (debugger) Formatter,
            which does not have that type (since it compiles against .NET 2.0).
            </remarks>
        </member>
        <member name="M:Fluid.ObjectPool`1.Allocate">
            <summary>
            Produces an instance.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically
            reducing how far we will typically search.
            </remarks>
        </member>
        <member name="M:Fluid.ObjectPool`1.Free(`0)">
            <summary>
            Returns objects to the pool.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically
            reducing how far we will typically search in Allocate.
            </remarks>
        </member>
        <member name="M:Fluid.ObjectPool`1.ForgetTrackedObject(`0,`0)">
             <summary>
             Removes an object from leak tracking.
            
             This is called when an object is returned to the pool.  It may also be explicitly
             called if an object allocated from the pool is intentionally not being returned
             to the pool.  This can be of use with pooled arrays if the consumer wants to
             return a larger array to the pool than was originally allocated.
             </summary>
        </member>
        <member name="T:Fluid.StringBuilderPool">
            <summary>
            The usage is:
                   var inst = PooledStringBuilder.GetInstance();
                   var sb = inst.builder;
                   ... Do Stuff...
                   ... sb.ToString() ...
                   inst.Free();
            </summary>
        </member>
        <member name="M:Fluid.StringBuilderPool.CreatePool(System.Int32)">
            <summary>
            If someone need to create a private pool
            </summary>
            <param name="size">The size of the pool.</param>
            <returns></returns>
        </member>
        <member name="M:Fluid.Scope.GetValue(System.String)">
            <summary>
            Returns the value with the specified name in the chain of scopes, or undefined 
            if it doesn't exist.
            </summary>
            <param name="name">The name of the value to return.</param>
        </member>
        <member name="M:Fluid.Tags.ITag.Parse(Irony.Parsing.ParseTreeNode,Fluid.ParserContext)">
            <summary>
            Called when the tag name is found in the template.
            </summary>
            <param name="node">The <see cref="T:Irony.Parsing.ParseTreeNode"/> instance representing the tag.</param>
            <param name="context">The <see cref="T:Fluid.ParserContext"/> instance representing the tag.</param>
        </member>
        <member name="M:Fluid.Tags.ITag.GetSyntax(Fluid.FluidGrammar)">
            <summary>
            Customizes the grammar.
            </summary>
            <param name="grammar"></param>
        </member>
        <member name="M:Fluid.TemplateContext.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Fluid.TemplateContext"/>.
            </summary>
        </member>
        <member name="M:Fluid.TemplateContext.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Fluid.TemplateContext"/> wih a model and option regiter its properties.
            </summary>
            <param name="model">The model.</param>
            <param name="registerModelProperties">Whether to register the model properties or not.</param>
        </member>
        <member name="P:Fluid.TemplateContext.MaxSteps">
            <summary>
            Gets or sets the maximum number of steps a script can execute. Leave to 0 for unlimited.
            </summary>
        </member>
        <member name="P:Fluid.TemplateContext.MaxRecursion">
            <summary>
            Gets or sets the maximum depth of recursions a script can execute.
            </summary>
        </member>
        <member name="P:Fluid.TemplateContext.ParserFactory">
            <summary>
            The <see cref="T:Fluid.IFluidParserFactory"/> instance to use with this context
            </summary>
        </member>
        <member name="P:Fluid.TemplateContext.TemplateFactory">
            <summary>
            The <see cref="T:Fluid.IFluidTemplate"/> instance to use with this context
            </summary>
        </member>
        <member name="F:Fluid.TemplateContext.AmbientValues">
            <summary>
            Used to define custom object on this instance to be used in filters and statements
            but which are not available from the template.
            </summary>
        </member>
        <member name="F:Fluid.TemplateContext.GlobalMemberAccessStrategy">
            <summary>
            Represent a global list of object members than can be accessed in any template.
            </summary>
            <remarks>
            This property should only be set by static constructores to prevent concurrency issues.
            </remarks>
        </member>
        <member name="F:Fluid.TemplateContext.MemberAccessStrategy">
            <summary>
            Represent a local list of object members than can be accessed with this context.
            </summary>
        </member>
        <member name="P:Fluid.TemplateContext.CultureInfo">
            <summary>
            Gets or sets the <see cref="P:Fluid.TemplateContext.CultureInfo"/> instance used to render locale values like dates and numbers.
            </summary>
        </member>
        <member name="P:Fluid.TemplateContext.Now">
            <summary>
            Gets or sets the way to return the current date and time for the template.
            </summary>
        </member>
        <member name="P:Fluid.TemplateContext.Model">
            <summary>
            Gets or sets a model object that is used to resolve properties in a template. This object is used if local and 
            global scopes are unsuccessfull.
            </summary>
        </member>
        <member name="M:Fluid.TemplateContext.EnterChildScope">
            <summary>
            Creates a new isolated scope. After than any value added to this content object will be released once
            <see cref="M:Fluid.TemplateContext.ReleaseScope" /> is called. The previous scope is linked such that its values are still available.
            </summary>
        </member>
        <member name="M:Fluid.TemplateContext.ReleaseScope">
            <summary>
            Exits the current scope that has been created by <see cref="M:Fluid.TemplateContext.EnterChildScope" />
            </summary>
        </member>
        <member name="P:Fluid.Values.FluidValue.ValueConverters">
            <summary>
            Gets the list of value converters.
            </summary>
        </member>
        <member name="M:Fluid.Values.FluidValue.SetTypeMapping(System.Type,System.Func{System.Object,Fluid.Values.FluidValue})">
            <summary>
            Defines a custom type mapping that is used when converting an <see cref="T:System.Object"/> to a <see cref="T:Fluid.Values.FluidValue"/>.
            </summary>
        </member>
        <member name="M:Fluid.Values.FluidValue.SetTypeMapping``1(System.Func{``0,Fluid.Values.FluidValue})">
            <summary>
            Defines a custom type mapping that is used when converting an instance to a <see cref="T:Fluid.Values.FluidValue"/>.
            </summary>
        </member>
        <member name="M:Fluid.Values.FluidValue.GetTypeMapping(System.Type)">
            <summary>
            Returns a type mapping, or <code>null</code> if it doesn't exist.
            </summary>
        </member>
        <member name="T:Fluid.Values.NumberValue">
            Numbers are stored as decimal values to handle the best possible precision.
            Decimals also have the capacity of retaining their precision across 
            operations:
            1 * 2 = 2
            1.0 * 2.0 = 2.00
        </member>
        <member name="P:Fluid.Values.StringValue.Encode">
            <summary>
            Gets or sets whether the string is encoded (default) or not when rendered.
            </summary>
        </member>
    </members>
</doc>
